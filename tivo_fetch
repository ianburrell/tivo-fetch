#!/usr/bin/ruby

require 'optparse'
require 'rubygems'
require 'votigoto'
require 'duration'
require 'tempfile'

class TivoFetcher

  def initialize(tivo, options)
    @mak = tivo.mak
    @options = options
  end

  def make_filename(show, extension)
    if @options[:show_dir]  && show.episode_number && show.episode_number > 100 then
      base_name = plex_title(show)
    else
      base_name = show.to_s
    end
    if @options[:skip] then
      skip_file = find_skip(base_name, extension, 'mpg', 'm4v')
      if skip_file then
        puts "skipping #{show.program_id} #{skip_file}" unless @options[:quiet]
        return nil
      end
      filename = base_name + '.' + extension
   else 
      filename = counter_filename(base_name, extension)
    end
    puts "fetch #{show.program_id} #{filename}"
    return filename
  end

  def plex_title(show)
      Dir.mkdir(show.title) unless Dir.exists?(show.title)
      season_num = show.episode_number / 100;
      season_episode = show.episode_number % 100;
      season_dir = show.title + '/' \
                   + 'Season ' + sprintf("%02d", season_num)
      Dir.mkdir(season_dir) unless Dir.exists?(season_dir)
      base_name = season_dir + '/' \
                  + show.title + ' - ' \
                  + sprintf("s%02de%02d", season_num, season_episode) \
                  + (show.episode_title ? ' - ' + show.episode_title : '')


  end

  def find_skip(base_name, *extensions)
    extensions.uniq.flat_map { |ext|
      [ base_name + '.' + ext, '.' + base_name + '.' + ext ]
    }.find { |file| File.exists?(file) }
  end
  
  def counter_filename(base_name, extension)
    filename = base_name + '.' + extension
    counter = 0
    while File.exists?(filename) do
      counter += 1
      filename = (base_name + '.' + counter.to_s + '.' + extension)
    end
    return filename
  end

  def fetch_cmd(show)
    url = show.content_url
    cookie_file = Tempfile.new('cookies').path
    return %Q{curl #{@options[:verbose] ? '-v' : '-s'} --cookie-jar #{cookie_file} --digest --user "tivo:#{@mak}" "#{url}"}
  end

  def smart_fetch(show)
    if @options[:encode] then
      fetch_and_encode(show)
    elsif @options[:decode] then
      fetch_and_decode(show)
    else
      fetch(show)
    end
  end

  def run_cmd(show, extension, &get_cmd)
    filename = make_filename(show, extension)
    return unless filename
    temp_filename = filename + ".tmp"
    cmd = get_cmd.call(show, temp_filename)
    puts cmd if @options[:verbose]
    system(cmd) or raise "#{cmd} failed: #{$?}"
    File.rename(temp_filename, filename)
    sleep(5)
  end
  
  def fetch(show)
    run_cmd(show, "tivo") { |show, temp_filename|
      fetch_cmd(show) \
        + %Q{ -o "#{temp_filename}"}
    }
  end

  def fetch_and_decode(show)
    run_cmd(show, "mpg") { |show, temp_filename|
      fetch_cmd(show) \
        + %Q{ | tivodecode --mak #{@mak} -o "#{temp_filename}" - #{@options[:verbose] ? '' : ' 2>/dev/null'}}
    }
  end

  def fetch_and_encode(show)
    run_cmd(show, "m4v") { |show, temp_filename|
      fetch_cmd() \
        + %Q{ | tivodecode --mak #{@mak} - 2>/dev/null} \
        + %Q{ | ffmpeg -loglevel #{@options[:verbose] ? 'info' : 'fatal' } -i - -c:v libx264 -crf 23 -c:a copy -f mp4 "#{temp_filename}"}
      #%Q{ | mencoder -quiet -profile low -o "#{temp_filename}" -}
    }
  end

end

def nice_file_size(size)
    units = %w{B KB MB GB TB} 
    e = (Math.log(size)/Math.log(1024)).floor 
    s = "%.3f" % (size.to_f / 1024.0**e)
    s.sub(/\.?0*$/, " " + units[e])
end

def nice_duration(msec)
    Duration.new(:seconds => (msec / 1000)).strftime("%h:%M:%S")
end

def print_details(show)
    puts "title: #{show.title}"
    puts "episode_title: #{show.episode_title}"
    puts "source_station: #{show.source_station}"
    puts "program_id: #{show.program_id}"
    puts "series_id: #{show.series_id}"
    puts "source_size: #{nice_file_size(show.source_size)}"
    puts "duration: #{nice_duration(show.duration)}"
    puts "source_channel: #{show.source_channel}"
    puts "capture_date: #{show.capture_date.strftime("%Y-%m-%d %H:%M:%S")}"
    puts "in_progress: #{show.in_progress}"
    puts "episode_number: #{show.episode_number}"
    puts
end

host = nil
mak = nil

options = {}
OptionParser.new do |opts|
  opts.banner = "Usage: tivo_fetch.rb [options]"
  
  opts.on("--host HOST", "Host") { |val|
    host = val
  }
  opts.on("--mak MAK", "Media Access Key") { |val|
    mak = val
  }
  opts.on("--detail", "Details") { |bool|
    options[:detail] = bool
  }
  opts.on("--decode", "Decode") { |bool|
    options[:decode] = bool
  }
  opts.on("--mp4", "Encode MP4") { |bool|
    options[:encode] = bool
  }
  opts.on("--encode", "Encode MP4") { |bool|
    options[:encode] = bool
  }
  opts.on("--fetch", "Fetch") { |bool|
    options[:fetch] = bool
  }
  opts.on("--skip", "Skip existing files") { |bool|
    options[:skip] = bool
  }
  opts.on("--show", "Show directories") { |bool|
    options[:show_dir] = bool
  }
  opts.on("--verbose", "Verbose") { |bool|
    options[:verbose] = bool
  }
  opts.on("--quiet", "Quiet") { |bool|
    options[:quiet] = bool
  }
end.parse!

tivo = Votigoto::Base.new(host, mak)

if ! ARGV.empty? then
  ARGV.each do |id|
    if options[:detail] then
      print_details(tivo.show(id))
    else
      TivoFetcher.new(tivo, options).smart_fetch(tivo.show(id))
    end
  end
else
  tivo.shows.each do |show|
    next if show.custom_icon === 'urn:tivo:image:suggestion-recording'
    if options[:detail] then
      print_details(show)
    elsif options[:decode] || options[:fetch] || options[:encode] then
      if show.in_progress then
        puts "in progress #{show.program_id} #{show.to_s}" unless options[:quiet]
        next
      elsif show.copy_protected then
        puts "copy protected #{show.program_id} #{show.to_s}" unless options[:quiet]
        next
      end
      TivoFetcher.new(tivo, options).smart_fetch(show)
    else
      puts "#{show.program_id} #{show}"
    end
  end
end
