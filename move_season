#!/usr/bin/env ruby

require 'optparse'
require 'fileutils'
require 'yaml'

options = {}
OptionParser.new do |opts|
  opts.banner = "Usage: tivo_fetch.rb [options]"
  
  opts.on("--series-map FILE", "Series map YAML file") { |val|
    options[:series_map] = YAML.load_file(val)
  }
  opts.on("--nosubdir", "Don't create subdir") { |bool|
    options[:no_subdir] = bool
  }
  opts.on("--touch", "Touch original hidden file") { |bool|
    options[:touch] = bool
  }
  opts.on("--noop", "Don't move file") { |bool|
    options[:noop] = bool
  }
end.parse!

file = ARGV.shift or raise "file required"

if ARGV.length == 2 then
  season_num, episode_num = *ARGV
elsif ARGV.length == 1 then
  episode = ARGV[0]
  if match = episode.match(/^s(\d\d)e(\d\d)$/) then
    season_num, episode_num = match.captures
  elsif match = episode.match(/^(\d{4})(-\d{2}-\d{2})/) then
    season_dir = "Season #{match[1]}"
    episode_str = match[0]
  elsif episode.to_i > 100 then
    season_num = episode.to_i / 100;
    episode_num = episode.to_i % 100;
  else
    raise "Unknown format for #{episode}"
  end
else
  raise "Wrong number of arguments"
end

parts = File.basename(file).split(' - ')
if parts.length == 2 then
  show_title, episode_title = parts
elsif parts.length == 3 then
  show_title, old_episode, episode_title = parts
else
  raise "Couldn't split #{file}"
end

episode_str ||= sprintf("s%02de%02d", season_num, episode_num)
plex_file = "#{show_title} - #{episode_str} - #{episode_title}"

unless options[:no_subdir] then
  series_map = options[:series_map]
  series_dir = series_map && series_map[show_title] || show_title
  Dir.mkdir(series_dir) unless Dir.exists?(series_dir)

  season_dir ||= 'Season ' + sprintf("%02d", season_num)
  dir = series_dir + '/' + season_dir
  Dir.mkdir(dir) unless Dir.exists?(dir)

  plex_path = dir + '/' + plex_file
else
  plex_path = plex_file
end

puts plex_path
unless options[:noop] then
  File.rename(file, plex_path)
end

if options[:touch] then
  FileUtils.touch(File.dirname(file) + "/." + File.basename(file))
end  
